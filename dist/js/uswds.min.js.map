{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/classlist-polyfill/src/index.js","node_modules/domready/ready.js","node_modules/elem-dataset/dist/index.js","node_modules/element-closest/element-closest.js","node_modules/keyboardevent-key-polyfill/index.js","node_modules/lodash.debounce/index.js","node_modules/object-assign/index.js","node_modules/receptor/behavior/index.js","node_modules/receptor/compose/index.js","node_modules/receptor/delegate/index.js","node_modules/receptor/delegateAll/index.js","node_modules/receptor/ignore/index.js","node_modules/receptor/index.js","node_modules/receptor/keymap/index.js","node_modules/receptor/once/index.js","node_modules/resolve-id-refs/index.js","src/js/components/accordion.js","src/js/components/banner.js","src/js/components/footer.js","src/js/components/index.js","src/js/components/navigation.js","src/js/components/password.js","src/js/components/search.js","src/js/components/skipnav.js","src/js/components/validator.js","src/js/config.js","src/js/events.js","src/js/polyfills/element-hidden.js","src/js/polyfills/index.js","src/js/start.js","src/js/utils/active-element.js","src/js/utils/behavior.js","src/js/utils/focus-trap.js","src/js/utils/is-in-viewport.js","src/js/utils/select.js","src/js/utils/toggle-field-mask.js","src/js/utils/toggle-form-input.js","src/js/utils/toggle.js","src/js/utils/validate-input.js"],"names":[],"mappings":"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","file":"uswds.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*\n * classList.js: Cross-browser full element.classList implementation.\n * 1.1.20170427\n *\n * By Eli Grey, http://eligrey.com\n * License: Dedicated to the public domain.\n *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\n */\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\n\nif (\"document\" in window.self) {\n\n// Full polyfill for browsers with no classList support\n// Including IE < Edge missing SVGElement.classList\nif (!(\"classList\" in document.createElement(\"_\")) \n\t|| document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\"))) {\n\n(function (view) {\n\n\"use strict\";\n\nif (!('Element' in view)) return;\n\nvar\n\t  classListProp = \"classList\"\n\t, protoProp = \"prototype\"\n\t, elemCtrProto = view.Element[protoProp]\n\t, objCtr = Object\n\t, strTrim = String[protoProp].trim || function () {\n\t\treturn this.replace(/^\\s+|\\s+$/g, \"\");\n\t}\n\t, arrIndexOf = Array[protoProp].indexOf || function (item) {\n\t\tvar\n\t\t\t  i = 0\n\t\t\t, len = this.length\n\t\t;\n\t\tfor (; i < len; i++) {\n\t\t\tif (i in this && this[i] === item) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t// Vendors: please allow content code to instantiate DOMExceptions\n\t, DOMEx = function (type, message) {\n\t\tthis.name = type;\n\t\tthis.code = DOMException[type];\n\t\tthis.message = message;\n\t}\n\t, checkTokenAndGetIndex = function (classList, token) {\n\t\tif (token === \"\") {\n\t\t\tthrow new DOMEx(\n\t\t\t\t  \"SYNTAX_ERR\"\n\t\t\t\t, \"An invalid or illegal string was specified\"\n\t\t\t);\n\t\t}\n\t\tif (/\\s/.test(token)) {\n\t\t\tthrow new DOMEx(\n\t\t\t\t  \"INVALID_CHARACTER_ERR\"\n\t\t\t\t, \"String contains an invalid character\"\n\t\t\t);\n\t\t}\n\t\treturn arrIndexOf.call(classList, token);\n\t}\n\t, ClassList = function (elem) {\n\t\tvar\n\t\t\t  trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\")\n\t\t\t, classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : []\n\t\t\t, i = 0\n\t\t\t, len = classes.length\n\t\t;\n\t\tfor (; i < len; i++) {\n\t\t\tthis.push(classes[i]);\n\t\t}\n\t\tthis._updateClassName = function () {\n\t\t\telem.setAttribute(\"class\", this.toString());\n\t\t};\n\t}\n\t, classListProto = ClassList[protoProp] = []\n\t, classListGetter = function () {\n\t\treturn new ClassList(this);\n\t}\n;\n// Most DOMException implementations don't allow calling DOMException's toString()\n// on non-DOMExceptions. Error's toString() is sufficient here.\nDOMEx[protoProp] = Error[protoProp];\nclassListProto.item = function (i) {\n\treturn this[i] || null;\n};\nclassListProto.contains = function (token) {\n\ttoken += \"\";\n\treturn checkTokenAndGetIndex(this, token) !== -1;\n};\nclassListProto.add = function () {\n\tvar\n\t\t  tokens = arguments\n\t\t, i = 0\n\t\t, l = tokens.length\n\t\t, token\n\t\t, updated = false\n\t;\n\tdo {\n\t\ttoken = tokens[i] + \"\";\n\t\tif (checkTokenAndGetIndex(this, token) === -1) {\n\t\t\tthis.push(token);\n\t\t\tupdated = true;\n\t\t}\n\t}\n\twhile (++i < l);\n\n\tif (updated) {\n\t\tthis._updateClassName();\n\t}\n};\nclassListProto.remove = function () {\n\tvar\n\t\t  tokens = arguments\n\t\t, i = 0\n\t\t, l = tokens.length\n\t\t, token\n\t\t, updated = false\n\t\t, index\n\t;\n\tdo {\n\t\ttoken = tokens[i] + \"\";\n\t\tindex = checkTokenAndGetIndex(this, token);\n\t\twhile (index !== -1) {\n\t\t\tthis.splice(index, 1);\n\t\t\tupdated = true;\n\t\t\tindex = checkTokenAndGetIndex(this, token);\n\t\t}\n\t}\n\twhile (++i < l);\n\n\tif (updated) {\n\t\tthis._updateClassName();\n\t}\n};\nclassListProto.toggle = function (token, force) {\n\ttoken += \"\";\n\n\tvar\n\t\t  result = this.contains(token)\n\t\t, method = result ?\n\t\t\tforce !== true && \"remove\"\n\t\t:\n\t\t\tforce !== false && \"add\"\n\t;\n\n\tif (method) {\n\t\tthis[method](token);\n\t}\n\n\tif (force === true || force === false) {\n\t\treturn force;\n\t} else {\n\t\treturn !result;\n\t}\n};\nclassListProto.toString = function () {\n\treturn this.join(\" \");\n};\n\nif (objCtr.defineProperty) {\n\tvar classListPropDesc = {\n\t\t  get: classListGetter\n\t\t, enumerable: true\n\t\t, configurable: true\n\t};\n\ttry {\n\t\tobjCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t} catch (ex) { // IE 8 doesn't support enumerable:true\n\t\t// adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36\n\t\t// modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected\n\t\tif (ex.number === undefined || ex.number === -0x7FF5EC54) {\n\t\t\tclassListPropDesc.enumerable = false;\n\t\t\tobjCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n\t\t}\n\t}\n} else if (objCtr[protoProp].__defineGetter__) {\n\telemCtrProto.__defineGetter__(classListProp, classListGetter);\n}\n\n}(window.self));\n\n}\n\n// There is full or partial native classList support, so just check if we need\n// to normalize the add/remove and toggle APIs.\n\n(function () {\n\t\"use strict\";\n\n\tvar testElement = document.createElement(\"_\");\n\n\ttestElement.classList.add(\"c1\", \"c2\");\n\n\t// Polyfill for IE 10/11 and Firefox <26, where classList.add and\n\t// classList.remove exist but support only one argument at a time.\n\tif (!testElement.classList.contains(\"c2\")) {\n\t\tvar createMethod = function(method) {\n\t\t\tvar original = DOMTokenList.prototype[method];\n\n\t\t\tDOMTokenList.prototype[method] = function(token) {\n\t\t\t\tvar i, len = arguments.length;\n\n\t\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\t\ttoken = arguments[i];\n\t\t\t\t\toriginal.call(this, token);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t\tcreateMethod('add');\n\t\tcreateMethod('remove');\n\t}\n\n\ttestElement.classList.toggle(\"c3\", false);\n\n\t// Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n\t// support the second argument.\n\tif (testElement.classList.contains(\"c3\")) {\n\t\tvar _toggle = DOMTokenList.prototype.toggle;\n\n\t\tDOMTokenList.prototype.toggle = function(token, force) {\n\t\t\tif (1 in arguments && !this.contains(token) === !force) {\n\t\t\t\treturn force;\n\t\t\t} else {\n\t\t\t\treturn _toggle.call(this, token);\n\t\t\t}\n\t\t};\n\n\t}\n\n\ttestElement = null;\n}());\n\n}\n","/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn)\n  }\n\n});\n","'use strict';\n\n// <3 Modernizr\n// https://raw.githubusercontent.com/Modernizr/Modernizr/master/feature-detects/dom/dataset.js\n\nfunction useNative() {\n\tvar elem = document.createElement('div');\n\telem.setAttribute('data-a-b', 'c');\n\n\treturn Boolean(elem.dataset && elem.dataset.aB === 'c');\n}\n\nfunction nativeDataset(element) {\n\treturn element.dataset;\n}\n\nmodule.exports = useNative() ? nativeDataset : function (element) {\n\tvar map = {};\n\tvar attributes = element.attributes;\n\n\tfunction getter() {\n\t\treturn this.value;\n\t}\n\n\tfunction setter(name, value) {\n\t\tif (typeof value === 'undefined') {\n\t\t\tthis.removeAttribute(name);\n\t\t} else {\n\t\t\tthis.setAttribute(name, value);\n\t\t}\n\t}\n\n\tfor (var i = 0, j = attributes.length; i < j; i++) {\n\t\tvar attribute = attributes[i];\n\n\t\tif (attribute) {\n\t\t\tvar name = attribute.name;\n\n\t\t\tif (name.indexOf('data-') === 0) {\n\t\t\t\tvar prop = name.slice(5).replace(/-./g, function (u) {\n\t\t\t\t\treturn u.charAt(1).toUpperCase();\n\t\t\t\t});\n\n\t\t\t\tvar value = attribute.value;\n\n\t\t\t\tObject.defineProperty(map, prop, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: getter.bind({ value: value || '' }),\n\t\t\t\t\tset: setter.bind(element, name)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\treturn map;\n};\n\n","// element-closest | CC0-1.0 | github.com/jonathantneal/closest\n\n(function (ElementProto) {\n\tif (typeof ElementProto.matches !== 'function') {\n\t\tElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector || function matches(selector) {\n\t\t\tvar element = this;\n\t\t\tvar elements = (element.document || element.ownerDocument).querySelectorAll(selector);\n\t\t\tvar index = 0;\n\n\t\t\twhile (elements[index] && elements[index] !== element) {\n\t\t\t\t++index;\n\t\t\t}\n\n\t\t\treturn Boolean(elements[index]);\n\t\t};\n\t}\n\n\tif (typeof ElementProto.closest !== 'function') {\n\t\tElementProto.closest = function closest(selector) {\n\t\t\tvar element = this;\n\n\t\t\twhile (element && element.nodeType === 1) {\n\t\t\t\tif (element.matches(selector)) {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\n\t\t\t\telement = element.parentNode;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n})(window.Element.prototype);\n","/* global define, KeyboardEvent, module */\n\n(function () {\n\n  var keyboardeventKeyPolyfill = {\n    polyfill: polyfill,\n    keys: {\n      3: 'Cancel',\n      6: 'Help',\n      8: 'Backspace',\n      9: 'Tab',\n      12: 'Clear',\n      13: 'Enter',\n      16: 'Shift',\n      17: 'Control',\n      18: 'Alt',\n      19: 'Pause',\n      20: 'CapsLock',\n      27: 'Escape',\n      28: 'Convert',\n      29: 'NonConvert',\n      30: 'Accept',\n      31: 'ModeChange',\n      32: ' ',\n      33: 'PageUp',\n      34: 'PageDown',\n      35: 'End',\n      36: 'Home',\n      37: 'ArrowLeft',\n      38: 'ArrowUp',\n      39: 'ArrowRight',\n      40: 'ArrowDown',\n      41: 'Select',\n      42: 'Print',\n      43: 'Execute',\n      44: 'PrintScreen',\n      45: 'Insert',\n      46: 'Delete',\n      48: ['0', ')'],\n      49: ['1', '!'],\n      50: ['2', '@'],\n      51: ['3', '#'],\n      52: ['4', '$'],\n      53: ['5', '%'],\n      54: ['6', '^'],\n      55: ['7', '&'],\n      56: ['8', '*'],\n      57: ['9', '('],\n      91: 'OS',\n      93: 'ContextMenu',\n      144: 'NumLock',\n      145: 'ScrollLock',\n      181: 'VolumeMute',\n      182: 'VolumeDown',\n      183: 'VolumeUp',\n      186: [';', ':'],\n      187: ['=', '+'],\n      188: [',', '<'],\n      189: ['-', '_'],\n      190: ['.', '>'],\n      191: ['/', '?'],\n      192: ['`', '~'],\n      219: ['[', '{'],\n      220: ['\\\\', '|'],\n      221: [']', '}'],\n      222: [\"'\", '\"'],\n      224: 'Meta',\n      225: 'AltGraph',\n      246: 'Attn',\n      247: 'CrSel',\n      248: 'ExSel',\n      249: 'EraseEof',\n      250: 'Play',\n      251: 'ZoomOut'\n    }\n  };\n\n  // Function keys (F1-24).\n  var i;\n  for (i = 1; i < 25; i++) {\n    keyboardeventKeyPolyfill.keys[111 + i] = 'F' + i;\n  }\n\n  // Printable ASCII characters.\n  var letter = '';\n  for (i = 65; i < 91; i++) {\n    letter = String.fromCharCode(i);\n    keyboardeventKeyPolyfill.keys[i] = [letter.toLowerCase(), letter.toUpperCase()];\n  }\n\n  function polyfill () {\n    if (!('KeyboardEvent' in window) ||\n        'key' in KeyboardEvent.prototype) {\n      return false;\n    }\n\n    // Polyfill `key` on `KeyboardEvent`.\n    var proto = {\n      get: function (x) {\n        var key = keyboardeventKeyPolyfill.keys[this.which || this.keyCode];\n\n        if (Array.isArray(key)) {\n          key = key[+this.shiftKey];\n        }\n\n        return key;\n      }\n    };\n    Object.defineProperty(KeyboardEvent.prototype, 'key', proto);\n    return proto;\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define('keyboardevent-key-polyfill', keyboardeventKeyPolyfill);\n  } else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n    module.exports = keyboardeventKeyPolyfill;\n  } else if (window) {\n    window.keyboardeventKeyPolyfill = keyboardeventKeyPolyfill;\n  }\n\n})();\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","const assign = require('object-assign');\nconst delegate = require('../delegate');\nconst delegateAll = require('../delegateAll');\n\nconst DELEGATE_PATTERN = /^(.+):delegate\\((.+)\\)$/;\nconst SPACE = ' ';\n\nconst getListeners = function(type, handler) {\n  var match = type.match(DELEGATE_PATTERN);\n  var selector;\n  if (match) {\n    type = match[1];\n    selector = match[2];\n  }\n\n  var options;\n  if (typeof handler === 'object') {\n    options = {\n      capture: popKey(handler, 'capture'),\n      passive: popKey(handler, 'passive')\n    };\n  }\n\n  var listener = {\n    selector: selector,\n    delegate: (typeof handler === 'object')\n      ? delegateAll(handler)\n      : selector\n        ? delegate(selector, handler)\n        : handler,\n    options: options\n  };\n\n  if (type.indexOf(SPACE) > -1) {\n    return type.split(SPACE).map(function(_type) {\n      return assign({type: _type}, listener);\n    });\n  } else {\n    listener.type = type;\n    return [listener];\n  }\n};\n\nvar popKey = function(obj, key) {\n  var value = obj[key];\n  delete obj[key];\n  return value;\n};\n\nmodule.exports = function behavior(events, props) {\n  const listeners = Object.keys(events)\n    .reduce(function(memo, type) {\n      var listeners = getListeners(type, events[type]);\n      return memo.concat(listeners);\n    }, []);\n\n  return assign({\n    add: function addBehavior(element) {\n      listeners.forEach(function(listener) {\n        element.addEventListener(\n          listener.type,\n          listener.delegate,\n          listener.options\n        );\n      });\n    },\n    remove: function removeBehavior(element) {\n      listeners.forEach(function(listener) {\n        element.removeEventListener(\n          listener.type,\n          listener.delegate,\n          listener.options\n        );\n      });\n    }\n  }, props);\n};\n","module.exports = function compose(functions) {\n  return function(e) {\n    return functions.some(function(fn) {\n      return fn.call(this, e) === false;\n    }, this);\n  };\n};\n","// polyfill Element.prototype.closest\nrequire('element-closest');\n\nmodule.exports = function delegate(selector, fn) {\n  return function delegation(event) {\n    var target = event.target.closest(selector);\n    if (target) {\n      return fn.call(target, event);\n    }\n  }\n};\n","const delegate = require('../delegate');\nconst compose = require('../compose');\n\nconst SPLAT = '*';\n\nmodule.exports = function delegateAll(selectors) {\n  const keys = Object.keys(selectors)\n\n  // XXX optimization: if there is only one handler and it applies to\n  // all elements (the \"*\" CSS selector), then just return that\n  // handler\n  if (keys.length === 1 && keys[0] === SPLAT) {\n    return selectors[SPLAT];\n  }\n\n  const delegates = keys.reduce(function(memo, selector) {\n    memo.push(delegate(selector, selectors[selector]));\n    return memo;\n  }, []);\n  return compose(delegates);\n};\n","module.exports = function ignore(element, fn) {\n  return function ignorance(e) {\n    if (element !== e.target && !element.contains(e.target)) {\n      return fn.call(this, e);\n    }\n  };\n};\n","module.exports = {\n  behavior:     require('./behavior'),\n  delegate:     require('./delegate'),\n  delegateAll:  require('./delegateAll'),\n  ignore:       require('./ignore'),\n  keymap:       require('./keymap'),\n};\n","require('keyboardevent-key-polyfill');\n\n// these are the only relevant modifiers supported on all platforms,\n// according to MDN:\n// <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState>\nconst MODIFIERS = {\n  'Alt':      'altKey',\n  'Control':  'ctrlKey',\n  'Ctrl':     'ctrlKey',\n  'Shift':    'shiftKey'\n};\n\nconst MODIFIER_SEPARATOR = '+';\n\nconst getEventKey = function(event, hasModifiers) {\n  var key = event.key;\n  if (hasModifiers) {\n    for (var modifier in MODIFIERS) {\n      if (event[MODIFIERS[modifier]] === true) {\n        key = [modifier, key].join(MODIFIER_SEPARATOR);\n      }\n    }\n  }\n  return key;\n};\n\nmodule.exports = function keymap(keys) {\n  const hasModifiers = Object.keys(keys).some(function(key) {\n    return key.indexOf(MODIFIER_SEPARATOR) > -1;\n  });\n  return function(event) {\n    var key = getEventKey(event, hasModifiers);\n    return [key, key.toLowerCase()]\n      .reduce(function(result, _key) {\n        if (_key in keys) {\n          result = keys[key].call(this, event);\n        }\n        return result;\n      }, undefined);\n  };\n};\n\nmodule.exports.MODIFIERS = MODIFIERS;\n","module.exports = function once(listener, options) {\n  var wrapped = function wrappedOnce(e) {\n    e.currentTarget.removeEventListener(e.type, wrapped, options);\n    return listener.call(this, e);\n  };\n  return wrapped;\n};\n\n","'use strict';\n\nvar RE_TRIM = /(^\\s+)|(\\s+$)/g;\nvar RE_SPLIT = /\\s+/;\n\nvar trim = String.prototype.trim\n  ? function(str) { return str.trim(); }\n  : function(str) { return str.replace(RE_TRIM, ''); };\n\nvar queryById = function(id) {\n  return this.querySelector('[id=\"' + id.replace(/\"/g, '\\\\\"') + '\"]');\n};\n\nmodule.exports = function resolveIds(ids, doc) {\n  if (typeof ids !== 'string') {\n    throw new Error('Expected a string but got ' + (typeof ids));\n  }\n\n  if (!doc) {\n    doc = window.document;\n  }\n\n  var getElementById = doc.getElementById\n    ? doc.getElementById.bind(doc)\n    : queryById.bind(doc);\n\n  ids = trim(ids).split(RE_SPLIT);\n\n  // XXX we can short-circuit here because trimming and splitting a\n  // string of just whitespace produces an array containing a single,\n  // empty string\n  if (ids.length === 1 && ids[0] === '') {\n    return [];\n  }\n\n  return ids\n    .map(function(id) {\n      var el = getElementById(id);\n      if (!el) {\n        throw new Error('no element with id: \"' + id + '\"');\n      }\n      return el;\n    });\n};\n","const select = require('../utils/select');\nconst behavior = require('../utils/behavior');\nconst toggle = require('../utils/toggle');\nconst isElementInViewport = require('../utils/is-in-viewport');\nconst { CLICK } = require('../events');\nconst { prefix: PREFIX } = require('../config');\n\nconst ACCORDION = `.${PREFIX}-accordion, .${PREFIX}-accordion-bordered`;\nconst BUTTON = `.${PREFIX}-accordion-button[aria-controls]`;\nconst EXPANDED = 'aria-expanded';\nconst MULTISELECTABLE = 'aria-multiselectable';\n\n/**\n * Get an Array of button elements belonging directly to the given\n * accordion element.\n * @param {HTMLElement} accordion\n * @return {array<HTMLButtonElement>}\n */\nconst getAccordionButtons = (accordion) => {\n  const buttons = select(BUTTON, accordion);\n\n  return buttons.filter(button => button.closest(ACCORDION) === accordion);\n};\n\n/**\n * Toggle a button's \"pressed\" state, optionally providing a target\n * state.\n *\n * @param {HTMLButtonElement} button\n * @param {boolean?} expanded If no state is provided, the current\n * state will be toggled (from false to true, and vice-versa).\n * @return {boolean} the resulting state\n */\nconst toggleButton = (button, expanded) => {\n  const accordion = button.closest(ACCORDION);\n  let safeExpanded = expanded;\n\n  if (!accordion) {\n    throw new Error(`${BUTTON} is missing outer ${ACCORDION}`);\n  }\n\n  safeExpanded = toggle(button, expanded);\n\n  // XXX multiselectable is opt-in, to preserve legacy behavior\n  const multiselectable = accordion.getAttribute(MULTISELECTABLE) === 'true';\n\n  if (safeExpanded && !multiselectable) {\n    getAccordionButtons(accordion).forEach((other) => {\n      if (other !== button) {\n        toggle(other, false);\n      }\n    });\n  }\n};\n\n/**\n * @param {HTMLButtonElement} button\n * @return {boolean} true\n */\nconst showButton = button => toggleButton(button, true);\n\n/**\n * @param {HTMLButtonElement} button\n * @return {boolean} false\n */\nconst hideButton = button => toggleButton(button, false);\n\nconst accordion = behavior({\n  [CLICK]: {\n    [BUTTON](event) {\n      event.preventDefault();\n\n      toggleButton(this);\n\n      if (this.getAttribute(EXPANDED) === 'true') {\n        // We were just expanded, but if another accordion was also just\n        // collapsed, we may no longer be in the viewport. This ensures\n        // that we are still visible, so the user isn't confused.\n        if (!isElementInViewport(this)) this.scrollIntoView();\n      }\n    },\n  },\n}, {\n  init(root) {\n    select(BUTTON, root).forEach((button) => {\n      const expanded = button.getAttribute(EXPANDED) === 'true';\n      toggleButton(button, expanded);\n    });\n  },\n  ACCORDION,\n  BUTTON,\n  show: showButton,\n  hide: hideButton,\n  toggle: toggleButton,\n  getButtons: getAccordionButtons,\n});\n\nmodule.exports = accordion;\n","const behavior = require('../utils/behavior');\nconst { CLICK } = require('../events');\nconst { prefix: PREFIX } = require('../config');\n\nconst HEADER = `.${PREFIX}-banner-header`;\nconst EXPANDED_CLASS = `${PREFIX}-banner-header-expanded`;\n\nconst toggleBanner = function toggleEl(event) {\n  event.preventDefault();\n  this.closest(HEADER).classList.toggle(EXPANDED_CLASS);\n};\n\nmodule.exports = behavior({\n  [CLICK]: {\n    [`${HEADER} [aria-controls]`]: toggleBanner,\n  },\n});\n","const debounce = require('lodash.debounce');\nconst behavior = require('../utils/behavior');\nconst select = require('../utils/select');\nconst { CLICK } = require('../events');\nconst { prefix: PREFIX } = require('../config');\n\nconst HIDDEN = 'hidden';\nconst SCOPE = `.${PREFIX}-footer-big`;\nconst NAV = `${SCOPE} nav`;\nconst BUTTON = `${NAV} .${PREFIX}-footer-primary-link`;\nconst COLLAPSIBLE = `.${PREFIX}-footer-collapsible`;\n\nconst HIDE_MAX_WIDTH = 480;\nconst DEBOUNCE_RATE = 180;\n\nfunction showPanel() {\n  if (window.innerWidth < HIDE_MAX_WIDTH) {\n    const collapseEl = this.closest(COLLAPSIBLE);\n    collapseEl.classList.toggle(HIDDEN);\n\n    // NB: this *should* always succeed because the button\n    // selector is scoped to \".{prefix}-footer-big nav\"\n    const collapsibleEls = select(COLLAPSIBLE, collapseEl.closest(NAV));\n\n    collapsibleEls.forEach((el) => {\n      if (el !== collapseEl) {\n        el.classList.add(HIDDEN);\n      }\n    });\n  }\n}\n\nconst resize = debounce(() => {\n  const hidden = window.innerWidth < HIDE_MAX_WIDTH;\n  select(COLLAPSIBLE).forEach(list => list.classList.toggle(HIDDEN, hidden));\n}, DEBOUNCE_RATE);\n\nmodule.exports = behavior({\n  [CLICK]: {\n    [BUTTON]: showPanel,\n  },\n}, {\n  // export for use elsewhere\n  HIDE_MAX_WIDTH,\n  DEBOUNCE_RATE,\n\n  init() {\n    resize();\n    window.addEventListener('resize', resize);\n  },\n\n  teardown() {\n    window.removeEventListener('resize', resize);\n  },\n});\n","const accordion = require('./accordion');\nconst banner = require('./banner');\nconst footer = require('./footer');\nconst navigation = require('./navigation');\nconst password = require('./password');\nconst search = require('./search');\nconst skipnav = require('./skipnav');\nconst validator = require('./validator');\n\nmodule.exports = {\n  accordion,\n  banner,\n  footer,\n  navigation,\n  password,\n  search,\n  skipnav,\n  validator,\n};\n","const behavior = require('../utils/behavior');\nconst select = require('../utils/select');\nconst toggle = require('../utils/toggle');\nconst FocusTrap = require('../utils/focus-trap');\nconst accordion = require('./accordion');\n\nconst { CLICK } = require('../events');\nconst { prefix: PREFIX } = require('../config');\n\nconst BODY = 'body';\nconst NAV = `.${PREFIX}-nav`;\nconst NAV_LINKS = `${NAV} a`;\nconst NAV_CONTROL = `.${PREFIX}-nav-link`;\nconst OPENERS = `.${PREFIX}-menu-btn`;\nconst CLOSE_BUTTON = `.${PREFIX}-nav-close`;\nconst OVERLAY = `.${PREFIX}-overlay`;\nconst CLOSERS = `${CLOSE_BUTTON}, .${PREFIX}-overlay`;\nconst TOGGLES = [NAV, OVERLAY].join(', ');\n\nconst ACTIVE_CLASS = 'usa-mobile_nav-active';\nconst VISIBLE_CLASS = 'is-visible';\n\nlet navigation;\nlet navActive;\n\nconst isActive = () => document.body.classList.contains(ACTIVE_CLASS);\n\nconst toggleNav = function (active) {\n  const { body } = document;\n  const safeActive = typeof active === 'boolean' ? active : !isActive();\n\n  body.classList.toggle(ACTIVE_CLASS, safeActive);\n\n  select(TOGGLES).forEach(el => el.classList.toggle(VISIBLE_CLASS, safeActive));\n\n  navigation.focusTrap.update(safeActive);\n\n  const closeButton = body.querySelector(CLOSE_BUTTON);\n  const menuButton = body.querySelector(OPENERS);\n\n  if (safeActive && closeButton) {\n    // The mobile nav was just activated, so focus on the close button,\n    // which is just before all the nav elements in the tab order.\n    closeButton.focus();\n  } else if (!safeActive && document.activeElement === closeButton && menuButton) {\n    // The mobile nav was just deactivated, and focus was on the close\n    // button, which is no longer visible. We don't want the focus to\n    // disappear into the void, so focus on the menu button if it's\n    // visible (this may have been what the user was just focused on,\n    // if they triggered the mobile nav by mistake).\n    menuButton.focus();\n  }\n\n  return safeActive;\n};\n\nconst resize = () => {\n  const closer = document.body.querySelector(CLOSE_BUTTON);\n\n  if (isActive() && closer && closer.getBoundingClientRect().width === 0) {\n    // When the mobile nav is active, and the close box isn't visible,\n    // we know the user's viewport has been resized to be larger.\n    // Let's make the page state consistent by deactivating the mobile nav.\n    navigation.toggleNav.call(closer, false);\n  }\n};\n\nconst onMenuClose = () => navigation.toggleNav.call(navigation, false);\nconst hideActiveNavDropdown = () => {\n  toggle(navActive, false);\n  navActive = null;\n};\n\n\nnavigation = behavior({\n  [CLICK]: {\n    [NAV_CONTROL]() {\n      // If another nav is open, close it\n      if (navActive && navActive !== this) {\n        hideActiveNavDropdown();\n      }\n      // store a reference to the last clicked nav link element, so we\n      // can hide the dropdown if another element on the page is clicked\n      if (navActive) {\n        hideActiveNavDropdown();\n      } else {\n        navActive = this;\n        toggle(navActive, true)\n      }\n\n      // Do this so the event handler on the body doesn't fire\n      return false;\n    },\n    [BODY]() {\n      if (navActive) {\n        hideActiveNavDropdown();\n      }\n    },\n    [OPENERS]: toggleNav,\n    [CLOSERS]: toggleNav,\n    [NAV_LINKS]() {\n      // A navigation link has been clicked! We want to collapse any\n      // hierarchical navigation UI it's a part of, so that the user\n      // can focus on whatever they've just selected.\n\n      // Some navigation links are inside accordions; when they're\n      // clicked, we want to collapse those accordions.\n      const acc = this.closest(accordion.ACCORDION);\n\n      if (acc) {\n        accordion.getButtons(acc).forEach(btn => accordion.hide(btn));\n      }\n\n      // If the mobile navigation menu is active, we want to hide it.\n      if (isActive()) {\n        navigation.toggleNav.call(navigation, false);\n      }\n    },\n  },\n}, {\n  init(root) {\n    const trapContainer = root.querySelector(NAV);\n\n    if (trapContainer) {\n      navigation.focusTrap = FocusTrap(trapContainer, {\n        Escape: onMenuClose,\n      });\n    }\n\n    resize();\n    window.addEventListener('resize', resize, false);\n  },\n  teardown() {\n    window.removeEventListener('resize', resize, false);\n    navActive = false;\n  },\n  focusTrap: null,\n  toggleNav,\n});\n\nmodule.exports = navigation;\n","const behavior = require('../utils/behavior');\nconst toggleFormInput = require('../utils/toggle-form-input');\n\nconst { CLICK } = require('../events');\nconst { prefix: PREFIX } = require('../config');\n\nconst LINK = `.${PREFIX}-show_password, .${PREFIX}-show_multipassword`;\n\nfunction toggle(event) {\n  event.preventDefault();\n  toggleFormInput(this);\n}\n\nmodule.exports = behavior({\n  [CLICK]: {\n    [LINK]: toggle,\n  },\n});\n","const ignore = require('receptor/ignore');\nconst behavior = require('../utils/behavior');\nconst select = require('../utils/select');\n\nconst { CLICK } = require('../events');\n\nconst BUTTON = '.js-search-button';\nconst FORM = '.js-search-form';\nconst INPUT = '[type=search]';\nconst CONTEXT = 'header'; // XXX\n\nlet lastButton;\n\nconst getForm = (button) => {\n  const context = button.closest(CONTEXT);\n  return context\n    ? context.querySelector(FORM)\n    : document.querySelector(FORM);\n};\n\nconst toggleSearch = (button, active) => {\n  const form = getForm(button);\n\n  if (!form) {\n    throw new Error(`No ${FORM} found for search toggle in ${CONTEXT}!`);\n  }\n\n  /* eslint-disable no-param-reassign */\n  button.hidden = active;\n  form.hidden = !active;\n  /* eslint-enable */\n\n  if (!active) {\n    return;\n  }\n\n  const input = form.querySelector(INPUT);\n\n  if (input) {\n    input.focus();\n  }\n  // when the user clicks _outside_ of the form w/ignore(): hide the\n  // search, then remove the listener\n  const listener = ignore(form, () => {\n    if (lastButton) {\n      hideSearch.call(lastButton); // eslint-disable-line no-use-before-define\n    }\n\n    document.body.removeEventListener(CLICK, listener);\n  });\n\n  // Normally we would just run this code without a timeout, but\n  // IE11 and Edge will actually call the listener *immediately* because\n  // they are currently handling this exact type of event, so we'll\n  // make sure the browser is done handling the current click event,\n  // if any, before we attach the listener.\n  setTimeout(() => {\n    document.body.addEventListener(CLICK, listener);\n  }, 0);\n};\n\nfunction showSearch() {\n  toggleSearch(this, true);\n  lastButton = this;\n}\n\nfunction hideSearch() {\n  toggleSearch(this, false);\n  lastButton = undefined;\n}\n\nconst search = behavior({\n  [CLICK]: {\n    [BUTTON]: showSearch,\n  },\n}, {\n  init(target) {\n    select(BUTTON, target).forEach((button) => {\n      toggleSearch(button, false);\n    });\n  },\n  teardown() {\n    // forget the last button clicked\n    lastButton = undefined;\n  },\n});\n\nmodule.exports = search;\n","const once = require('receptor/once');\nconst behavior = require('../utils/behavior');\nconst { CLICK } = require('../events');\nconst { prefix: PREFIX } = require('../config');\n\nconst LINK = `.${PREFIX}-skipnav[href^=\"#\"], .${PREFIX}-footer-return-to-top [href^=\"#\"]`;\nconst MAINCONTENT = 'main-content';\n\nfunction setTabindex() {\n  // NB: we know because of the selector we're delegating to below that the\n  // href already begins with '#'\n  const id = this.getAttribute('href');\n  const target = document.getElementById((id === '#') ? MAINCONTENT : id.slice(1));\n\n  if (target) {\n    target.style.outline = '0';\n    target.setAttribute('tabindex', 0);\n    target.focus();\n    target.addEventListener('blur', once(() => {\n      target.setAttribute('tabindex', -1);\n    }));\n  } else {\n    // throw an error?\n  }\n}\n\nmodule.exports = behavior({\n  [CLICK]: {\n    [LINK]: setTabindex,\n  },\n});\n","const behavior = require('../utils/behavior');\nconst validate = require('../utils/validate-input');\n\nfunction change() {\n  validate(this);\n}\n\nconst validator = behavior({\n  'keyup change': {\n    'input[data-validation-element]': change,\n  },\n});\n\nmodule.exports = validator;\n","module.exports = {\n  prefix: 'usa',\n};\n","module.exports = {\n  // This used to be conditionally dependent on whether the\n  // browser supported touch events; if it did, `CLICK` was set to\n  // `touchstart`.  However, this had downsides:\n  //\n  // * It pre-empted mobile browsers' default behavior of detecting\n  //   whether a touch turned into a scroll, thereby preventing\n  //   users from using some of our components as scroll surfaces.\n  //\n  // * Some devices, such as the Microsoft Surface Pro, support *both*\n  //   touch and clicks. This meant the conditional effectively dropped\n  //   support for the user's mouse, frustrating users who preferred\n  //   it on those systems.\n  CLICK: 'click',\n};\n","\nconst elproto = window.HTMLElement.prototype;\nconst HIDDEN = 'hidden';\n\nif (!(HIDDEN in elproto)) {\n  Object.defineProperty(elproto, HIDDEN, {\n    get() {\n      return this.hasAttribute(HIDDEN);\n    },\n    set(value) {\n      if (value) {\n        this.setAttribute(HIDDEN, '');\n      } else {\n        this.removeAttribute(HIDDEN);\n      }\n    },\n  });\n}\n","\n// polyfills HTMLElement.prototype.classList and DOMTokenList\nrequire('classlist-polyfill');\n// polyfills HTMLElement.prototype.hidden\nrequire('./element-hidden');\n","\nconst domready = require('domready');\n\n/**\n * The 'polyfills' define key ECMAScript 5 methods that may be missing from\n * older browsers, so must be loaded first.\n */\nrequire('./polyfills');\n\nconst uswds = require('./config');\n\nconst components = require('./components');\n\nuswds.components = components;\n\ndomready(() => {\n  const target = document.body;\n  Object.keys(components)\n    .forEach((key) => {\n      const behavior = components[key];\n      behavior.on(target);\n    });\n});\n\nmodule.exports = uswds;\n","module.exports = (htmlDocument = document) => htmlDocument.activeElement;\n","const assign = require('object-assign');\nconst Behavior = require('receptor/behavior');\n\n/**\n * @name sequence\n * @param {...Function} seq an array of functions\n * @return { closure } callHooks\n */\n// We use a named function here because we want it to inherit its lexical scope\n// from the behavior props object, not from the module\nconst sequence = (...seq) => function callHooks(target = document.body) {\n  seq.forEach((method) => {\n    if (typeof this[method] === 'function') {\n      this[method].call(this, target);\n    }\n  });\n};\n\n/**\n * @name behavior\n * @param {object} events\n * @param {object?} props\n * @return {receptor.behavior}\n */\nmodule.exports = (events, props) => Behavior(events, assign({\n  on: sequence('init', 'add'),\n  off: sequence('teardown', 'remove'),\n}, props));\n","const assign = require('object-assign');\nconst { keymap } = require('receptor');\nconst behavior = require('./behavior');\nconst select = require('./select');\nconst activeElement = require('./active-element');\n\nconst FOCUSABLE = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex=\"0\"], [contenteditable]';\n\nconst tabHandler = (context) => {\n  const focusableElements = select(FOCUSABLE, context);\n  const firstTabStop = focusableElements[0];\n  const lastTabStop = focusableElements[focusableElements.length - 1];\n\n  // Special rules for when the user is tabbing forward from the last focusable element,\n  // or when tabbing backwards from the first focusable element\n  function tabAhead(event) {\n    if (activeElement() === lastTabStop) {\n      event.preventDefault();\n      firstTabStop.focus();\n    }\n  }\n\n  function tabBack(event) {\n    if (activeElement() === firstTabStop) {\n      event.preventDefault();\n      lastTabStop.focus();\n    }\n  }\n\n  return {\n    firstTabStop,\n    lastTabStop,\n    tabAhead,\n    tabBack,\n  };\n};\n\nmodule.exports = (context, additionalKeyBindings = {}) => {\n  const tabEventHandler = tabHandler(context);\n\n  //  TODO: In the future, loop over additional keybindings and pass an array\n  // of functions, if necessary, to the map keys. Then people implementing\n  // the focus trap could pass callbacks to fire when tabbing\n  const keyMappings = keymap(assign({\n    Tab: tabEventHandler.tabAhead,\n    'Shift+Tab': tabEventHandler.tabBack,\n  }, additionalKeyBindings));\n\n  const focusTrap = behavior({\n    keydown: keyMappings,\n  }, {\n    init() {\n      // TODO: is this desireable behavior? Should the trap always do this by default or should\n      // the component getting decorated handle this?\n      tabEventHandler.firstTabStop.focus();\n    },\n    update(isActive) {\n      if (isActive) {\n        this.on();\n      } else {\n        this.off();\n      }\n    },\n  });\n\n  return focusTrap;\n};\n","// https://stackoverflow.com/a/7557433\nfunction isElementInViewport(el, win = window,\n  docEl = document.documentElement) {\n  const rect = el.getBoundingClientRect();\n\n  return (\n    rect.top >= 0\n    && rect.left >= 0\n    && rect.bottom <= (win.innerHeight || docEl.clientHeight)\n    && rect.right <= (win.innerWidth || docEl.clientWidth)\n  );\n}\n\nmodule.exports = isElementInViewport;\n","\n\n/**\n * @name isElement\n * @desc returns whether or not the given argument is a DOM element.\n * @param {any} value\n * @return {boolean}\n */\nconst isElement = value => value && typeof value === 'object' && value.nodeType === 1;\n\n/**\n * @name select\n * @desc selects elements from the DOM by class selector or ID selector.\n * @param {string} selector - The selector to traverse the DOM with.\n * @param {Document|HTMLElement?} context - The context to traverse the DOM\n *   in. If not provided, it defaults to the document.\n * @return {HTMLElement[]} - An array of DOM nodes or an empty array.\n */\nmodule.exports = (selector, context) => {\n  if (typeof selector !== 'string') {\n    return [];\n  }\n\n  if (!context || !isElement(context)) {\n    context = window.document; // eslint-disable-line no-param-reassign\n  }\n\n  const selection = context.querySelectorAll(selector);\n  return Array.prototype.slice.call(selection);\n};\n","/**\n * Flips given INPUT elements between masked (hiding the field value) and unmasked\n * @param {Array.HTMLElement} fields - An array of INPUT elements\n * @param {Boolean} mask - Whether the mask should be applied, hiding the field value\n */\nmodule.exports = (field, mask) => {\n  field.setAttribute('autocapitalize', 'off');\n  field.setAttribute('autocorrect', 'off');\n  field.setAttribute('type', mask ? 'password' : 'text');\n};\n","const resolveIdRefs = require('resolve-id-refs');\nconst toggleFieldMask = require('./toggle-field-mask');\n\nconst CONTROLS = 'aria-controls';\nconst PRESSED = 'aria-pressed';\nconst SHOW_ATTR = 'data-show-text';\nconst HIDE_ATTR = 'data-hide-text';\n\n/**\n * Replace the word \"Show\" (or \"show\") with \"Hide\" (or \"hide\") in a string.\n * @param {string} showText\n * @return {strong} hideText\n */\nconst getHideText = showText => showText.replace(/\\bShow\\b/i, show => `${show[0] === 'S' ? 'H' : 'h'}ide`);\n\n/**\n * Component that decorates an HTML element with the ability to toggle the\n * masked state of an input field (like a password) when clicked.\n * The ids of the fields to be masked will be pulled directly from the button's\n * `aria-controls` attribute.\n *\n * @param  {HTMLElement} el    Parent element containing the fields to be masked\n * @return {boolean}\n */\nmodule.exports = (el) => {\n  // this is the *target* state:\n  // * if the element has the attr and it's !== \"true\", pressed is true\n  // * otherwise, pressed is false\n  const pressed = el.hasAttribute(PRESSED)\n    && el.getAttribute(PRESSED) !== 'true';\n\n  const fields = resolveIdRefs(el.getAttribute(CONTROLS));\n  fields.forEach(field => toggleFieldMask(field, pressed));\n\n  if (!el.hasAttribute(SHOW_ATTR)) {\n    el.setAttribute(SHOW_ATTR, el.textContent);\n  }\n\n  const showText = el.getAttribute(SHOW_ATTR);\n  const hideText = el.getAttribute(HIDE_ATTR) || getHideText(showText);\n\n  el.textContent = pressed ? showText : hideText; // eslint-disable-line no-param-reassign\n  el.setAttribute(PRESSED, pressed);\n  return pressed;\n};\n","const EXPANDED = 'aria-expanded';\nconst CONTROLS = 'aria-controls';\nconst HIDDEN = 'hidden';\n\nmodule.exports = (button, expanded) => {\n  let safeExpanded = expanded;\n\n  if (typeof safeExpanded !== 'boolean') {\n    safeExpanded = button.getAttribute(EXPANDED) === 'false';\n  }\n\n  button.setAttribute(EXPANDED, safeExpanded);\n\n  const id = button.getAttribute(CONTROLS);\n  const controls = document.getElementById(id);\n  if (!controls) {\n    throw new Error(`No toggle target found with id: \"${id}\"`);\n  }\n\n  if (safeExpanded) {\n    controls.removeAttribute(HIDDEN);\n  } else {\n    controls.setAttribute(HIDDEN, '');\n  }\n\n  return safeExpanded;\n};\n","\nconst dataset = require('elem-dataset');\n\nconst { prefix: PREFIX } = require('../config');\n\nconst CHECKED = 'aria-checked';\nconst CHECKED_CLASS = `${PREFIX}-checklist-checked`;\n\nmodule.exports = function validate(el) {\n  const data = dataset(el);\n  const id = data.validationElement;\n  const checkList = id.charAt(0) === '#'\n    ? document.querySelector(id)\n    : document.getElementById(id);\n\n  if (!checkList) {\n    throw new Error(`No validation element found with id: \"${id}\"`);\n  }\n\n  Object.entries(data).forEach(([key, value]) => {\n    if (key.startsWith('validate')) {\n      const validatorName = key.substr('validate'.length).toLowerCase();\n      const validatorPattern = new RegExp(value);\n      const validatorSelector = `[data-validator=\"${validatorName}\"]`;\n      const validatorCheckbox = checkList.querySelector(validatorSelector);\n\n      if (!validatorCheckbox) {\n        throw new Error(`No validator checkbox found for: \"${validatorName}\"`);\n      }\n\n      const checked = validatorPattern.test(el.value);\n      validatorCheckbox.classList.toggle(CHECKED_CLASS, checked);\n      validatorCheckbox.setAttribute(CHECKED, checked);\n    }\n  });\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}